@page "/inviteMembers"
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IFamilyService FamilyService;
@inject AuthenticationStateProvider AuthenticationStateProvider;


<PageTitle>Create Family</PageTitle>

<h3 class="text-center">Invite members</h3>
@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                @_errorMessage
            </MudAlert>
        </MudItem>
    </MudGrid>
}

@if (_createSuccess)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Info" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                Create successful
            </MudAlert>
        </MudItem>
    </MudGrid>
}


<MudGrid Justify="Justify.Center">
    <MudItem xs="6" Class="d-flex justify-center">
        <MudText Typo="Typo.h5">Enter email of the user you want to add to your family.</MudText>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center">
    <MudItem xs="6" Class="d-flex justify-center">
        <MudTextField T="string" Class="mt-3" Label="Email" @bind-Value="_email"/>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center" Class="mt-3">
    <MudItem xs="6" Class="d-flex justify-content-between">
        <MudCheckBox Label="Another invite" Color="Color.Primary" Class="me-2"
                     @bind-Value=_anotherInvite></MudCheckBox>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="@(() => SendInvites())">
            Send invite
        </MudButton>
    </MudItem>
</MudGrid>




@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _error;
    private bool _isDataFetched;
    private string _familyName;

    private string _userId;
    private string _token;
    private string _refreshToken;

    private bool _shouldRender = false;
    protected override bool ShouldRender() => _shouldRender;

    private string _errorMessage = "Unable to create family. Try again later";

    private string _email;
    private bool _anotherInvite;
    private bool _createSuccess;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await AuthenticationState;

            _userId = UserUtil.GetUserId(state.User);

            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];

            _shouldRender = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            _error = true;
            _isDataFetched = true;
            StateHasChanged();
        }
    }

    private async Task SendInvites()
    {
        List<string> emails = new List<string>();

        emails.Add(_email);

        // bool _inviteSuccess = await FamilyService.InviteMembers(emails, _token, _refreshToken, _userId);

        bool _inviteSuccess = true;

        if (_inviteSuccess && _anotherInvite)
        {
            _email = string.Empty;
            _anotherInvite = false;
            StateHasChanged();
        }
        else if (!_inviteSuccess && _anotherInvite)
        {
            _error = true;
            _anotherInvite = false;
            StateHasChanged();
        }
        else if (_inviteSuccess && !_anotherInvite)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}