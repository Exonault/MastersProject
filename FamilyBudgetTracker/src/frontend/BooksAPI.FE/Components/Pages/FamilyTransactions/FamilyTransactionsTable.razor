@using System.Security.Claims
@using BooksAPI.FE.Contracts.Familial.FamilyTransaction
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IFamilyTransactionService TransactionService;

<MudTable Items="Transactions">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<FamilyTransactionResponse, object>(x => x.TransactionDate)"
                               InitialDirection="SortDirection.Descending">
                Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>User</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">
            <MudText Typo="Typo.body1"> @context.TransactionDate.ToShortDateString()</MudText>
        </MudTd>
        <MudTd>
            <MudText Typo="Typo.body1"> @context.FamilyMember.UserName</MudText>
        </MudTd>
        <MudTd DataLabel="Description" Class="w-50">
            <MudText Typo="Typo.body1">@context.Description</MudText>
        </MudTd>
        <MudTd DataLabel="Amount">
            <MudText Typo="Typo.body1">@context.Amount</MudText>
        </MudTd>
        <MudTd DataLabel="Category">
            <MudText Typo="Typo.body1">@context.Category.Name</MudText>
        </MudTd>
        <MudTd DataLabel="Actions" Style="width: 10% !important;">
            @* <div class="justify-content-center"> *@
            @*     <MudButton Variant="Variant.Filled" Color="Color.Primary" *@
            @*                OnClick="@(() => NavigationManager.NavigateTo($"updateTransaction?transactionId={context.Id}"))"> *@
            @*         Update *@
            @*     </MudButton> *@
            @*     <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mt-3" *@
            @*                OnClick="@(() => DeleteTransaction(context.Id))"> *@
            @*         Delete *@
            @*     </MudButton> *@
            @* </div> *@
            @if (CanCurrentUserEditRow(context))
            {
                <div class="d-flex justify-content-center">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => NavigationManager.NavigateTo($"updateTransaction?transactionId={context.Id}"))">
                        Update
                    </MudButton>

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Error"
                               Class="ml-2"
                               OnClick="@(() => DeleteTransaction(context.Id))">
                        Delete
                    </MudButton>
                </div>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25,}"/>
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public List<FamilyTransactionResponse> Transactions { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string _token;
    private string _refreshToken;
    private string _userId;
    private string _familyId;

    private ClaimsPrincipal _currentUser;
    private string _currentUserName;
    private bool _isFamilyAdmin;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _currentUser = state.User;

        _userId = UserUtil.GetUserId(_currentUser);
        _familyId = UserUtil.GetFamilyId(_currentUser);
        _currentUserName = UserUtil.GetUserName(_currentUser);
        _isFamilyAdmin = UserUtil.IsUserFamilyAdmin(_currentUser);

        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
        }
        catch (Exception e)
        {
            StateHasChanged();
        }
    }

    private async Task DeleteTransaction(int id)
    {
        try
        {
            bool deleteSuccess = true;
            // bool deleteSuccess = await TransactionService.DeleteTransaction(id, _token, _refreshToken, _userId, _familyId);

            if (deleteSuccess)
            {
                FamilyTransactionResponse? transactionResponse = Transactions.FirstOrDefault(x => x.Id == id);
                Transactions.Remove(transactionResponse!);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            StateHasChanged();
        }
    }

    private bool CanCurrentUserEditRow(FamilyTransactionResponse row)
    {
        if (_isFamilyAdmin)
            return true;

        return String.Equals(row.FamilyMember.UserName, _currentUserName, StringComparison.OrdinalIgnoreCase);
    }

}