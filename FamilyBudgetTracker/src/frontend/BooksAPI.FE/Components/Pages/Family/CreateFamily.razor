@page "/createFamily"
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util
@using Microsoft.IdentityModel.Tokens

@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IFamilyService FamilyService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Create Family</PageTitle>

<h3 class="text-center">Create Family</h3>
@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                @_errorMessage
            </MudAlert>
        </MudItem>
    </MudGrid>
}

<MudGrid Justify="Justify.Center">
    <MudItem xs="6" Class="d-flex justify-center">
        <MudText Typo="Typo.h5">Enter the name you want your family to have</MudText>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center">
    <MudItem xs="3" Class="d-flex justify-center">
        <MudTextField T="string" Label="Family Name" InputType="InputType.Text" Variant="Variant.Text"
                      @bind-Value="_familyName"/>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center" Class="mt-3">
    <MudButton Variant="Variant.Filled" Color="Color.Primary"
               OnClick="@(() => NexStep())">
        Next step
    </MudButton>
</MudGrid>


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _error;
    private bool _isDataFetched;
    private string _familyName;

    private string _userId;
    private string _token;
    private string _refreshToken;

    private bool _shouldRender = false;
    protected override bool ShouldRender() => _shouldRender;

    private string _errorMessage = "Unable to create family. Try again later";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await AuthenticationState;

            _userId = UserUtil.GetUserId(state.User);

            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];

            _shouldRender = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            _error = true;
            _isDataFetched = true;
            StateHasChanged();
        }
    }

    private async Task NexStep()
    {
        // bool familyCreated = await FamilyService.CreateFamily(_familyName, _token, _refreshToken, _userId);

        if (_familyName.IsNullOrEmpty())
        {
            _error = true;
            _errorMessage = "Enter family name before processing";
            StateHasChanged();
        }
        else
        {
            bool familyCreated = true;
            if (familyCreated)
            {
                NavigationManager.NavigateTo("inviteMembers");
            }
            else
            {
                _error = true;
                StateHasChanged();
            } 
        }

       
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}