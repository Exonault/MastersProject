@page "/createFamilyTransaction"
@page "/updateFamilyTransaction"
@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Contracts.Familial.FamilyCategory
@using BooksAPI.FE.Extensions
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Model
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IFamilyCategoryService CategoryService;
@inject IFamilyTransactionService FamilyTransactionService;
@inject IJSRuntime JsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>@(_isCreate ? "Create" : "Update")</PageTitle>

<h3 class="text-center">
    @(_isCreate ? "Create a new family transaction entry" : "Update current entry")
</h3>

@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                @_errorMessage
            </MudAlert>
        </MudItem>
    </MudGrid>
}

@if (_createSuccess)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Info" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                Create successful
            </MudAlert>
        </MudItem>
    </MudGrid>
}

@if (_isDataFetched && !_error)
{
    <EditForm Model="_model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        @if (context.GetValidationMessages().Count() != 0)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem md="4" xs="4">
                    <MudAlert Severity="Severity.Error">
                        <ValidationSummary/>
                    </MudAlert>
                </MudItem>
            </MudGrid>
        }

        <MudGrid Justify="Justify.Center">
            <MudItem xs="6">

                <MudDatePicker Editable="true" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy"
                               Label="Transaction date"
                               @bind-Date="_model.TransactionDate"/>

                <MudNumericField T="decimal" HideSpinButtons="true" Min="0" Format="F2" Label="Amount"
                                 Variant="Variant.Text"
                                 @bind-Value="_model.Amount"/>

                <MudTextField T="string" Label="Description" InputType="InputType.Text" Variant="Variant.Text"
                              AutoGrow
                              @bind-Value="_model.Description"/>

                <MudText Typo="Typo.body1" Class="mt-3">Category type</MudText>
                <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection"
                                @bind-Value="_categoryType">
                    <MudToggleItem Value="@("Expense")" Text="Expense"/>
                    <MudToggleItem Value="@("Income")" Text="Income"/>
                </MudToggleGroup>

                <MudSelect T="string" Label="Category" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="_model.Category">
                    @foreach (var category in _categories.Where(x => x.Type == _categoryType))
                    {
                        <MudSelectItem Value="category.Name">@category.Name</MudSelectItem>
                    }
                </MudSelect>

                <div class="d-flex justify-content-center mt-3">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                               Color="Color.Primary">@(_isCreate ? "Create" : "Update")</MudButton>
                </div>

            </MudItem>
        </MudGrid>
    </EditForm>
}
else if (!_isDataFetched)
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private int _transactionId = 0;

    private bool _isCreate;
    private bool _error;
    private bool _isDataFetched;
    private bool _createSuccess;

    private string _categoryType = "Expense";

    private bool _shouldRender = false;
    protected override bool ShouldRender() => _shouldRender;

    private FamilyTransactionModel _model = new();
    private List<FamilyCategoryResponse> _categories = [];

    private string _userId;
    private string _familyId;
    private string _token;
    private string _refreshToken;

    private string _errorMessage = "Unable to create transaction. Try again later";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await AuthenticationState;

            _userId = UserUtil.GetUserId(state.User);
            _familyId = UserUtil.GetFamilyId(state.User);

            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];

            NavigationManager.GetQueryString<int>("transactionId", out _transactionId);

            _isCreate = _transactionId == 0;

            if (!_isCreate)
            {
                _model = await FamilyTransactionService.GetTransactionModel(_transactionId, _token, _refreshToken, _userId, _familyId);
                _isDataFetched = true;
                StateHasChanged();
            }

            // _categories = await CategoryService.GetFamilyCategories(_token, _refreshToken, _userId, _familyId);

            _categories = FamilyMockUtil.GetFamilyCategoriesMockResponse();
            _categories = _categories.OrderBy(x => x.Type).ToList();
            
            _isDataFetched = true;
            _shouldRender = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            _error = true;
            _errorMessage = _isCreate ? "Unable to create category. Try again later" : "Unable to update category. Try again later";
            _isDataFetched = true;
            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            FamilyCategoryResponse? category = _categories.FirstOrDefault(x => x.Name == _model.Category);

            if (category is null)
            {
                _error = true;
                StateHasChanged();
            }

            if (_isCreate)
            {
                //Create
                _createSuccess = await FamilyTransactionService.CreateTransaction(_model, category!.Id, _token, _refreshToken, _userId, _familyId);

                if (!_createSuccess)
                {
                    _error = true;
                }

                StateHasChanged();
            }
            else
            {
                var updateSuccess = await FamilyTransactionService.UpdateTransaction(_transactionId, _model, category!.Id, _token,
                    _refreshToken, _userId, _familyId);

                if (!updateSuccess)
                {
                    _error = true;
                    StateHasChanged();
                }
                else
                {
                    NavigationManager.NavigateTo("/familyTransactionsSummary");
                }
            }
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _error = true;
            StateHasChanged();
        }
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}
