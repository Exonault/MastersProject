@using System.Globalization
@using BooksAPI.FE.Contracts.Familial.FamilyCategory
@using BooksAPI.FE.Contracts.Familial.FamilyTransaction
@using BooksAPI.FE.Contracts.Personal.Transaction
@using BooksAPI.FE.Contracts.User
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject IJSRuntime JsRuntime;
@inject IFamilyTransactionService TransactionService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;


<MudPaper Class="pa-4">

    <div class="d-flex justify-space-between mb-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="GoToPrevious">
            <MudIcon Icon="@Icons.Material.Filled.ChevronLeft"/>
            Previous
        </MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="GoToNext">
            Next
            <MudIcon Icon="@Icons.Material.Filled.ChevronRight"/>
        </MudButton>
    </div>

    <MudTabs @bind-ActivePanelIndex="_selectedTabIndex"
             OnActivePanelIndexChanged="OnTabChanged"
             Rounded="true" Centered="true" RoundedBar="true">

        @foreach (var month in _monthTabs)
        {
            <MudTabPanel Text="@month.Label" Class="pe-none">
                <FamilyTransactionsTable Transactions="@month.Content"/>
            </MudTabPanel>
        }
    </MudTabs>

</MudPaper>


@code {
    private List<MonthTabMoreInfo> _monthTabs = new();
    private int _selectedTabIndex;
    private DateTime _centerMonth;

    private const int TabCount = 1; // Change this to 3, 5, 7, etc. (should be odd)
    private int CenterIndex => TabCount / 2;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string _userId;
    private string _familyId;
    private string _token;
    private string _refreshToken;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _userId = UserUtil.GetUserId(state.User);
        _familyId = UserUtil.GetFamilyId(state.User);

        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
        }
        catch (Exception e)
        {
        }

        _centerMonth = DateTime.Now;
        await BuildMonthTabsAsync(_centerMonth);
    }

    private async Task OnTabChanged(int newIndex)
    {
        if (newIndex != CenterIndex)
        {
            var selectedDate = _monthTabs[newIndex].Date;

            if (selectedDate > DateTime.Now)
                return;

            _centerMonth = selectedDate;
            await BuildMonthTabsAsync(_centerMonth);
        }
    }

    private async Task BuildMonthTabsAsync(DateTime center)
    {
        _monthTabs = new List<MonthTabMoreInfo>();
        for (int i = -CenterIndex; i <= CenterIndex; i++)
        {
            _monthTabs.Add(new MonthTabMoreInfo(center.AddMonths(i)));
        }

        var loadTasks = _monthTabs.Select(async tab =>
        {
            tab.Content = FamilyMockUtil.GetFamilyTransactionsMockResponse().OrderBy(x => x.TransactionDate).ToList();
            // tab.Content = await TransactionService.GetTransactionsForPeriod(tab.Date, _token, _refreshToken, _userId);
            tab.IsLoading = false;
        });

        await Task.WhenAll(loadTasks);

        _selectedTabIndex = CenterIndex;
        StateHasChanged();
    }

    private async Task GoToPrevious()
    {
        _centerMonth = _centerMonth.AddMonths(-1);
        await BuildMonthTabsAsync(_centerMonth);
    }

    private async Task GoToNext()
    {
        var nextMonth = _centerMonth.AddMonths(1);

        if (nextMonth > DateTime.Now)
            return;

        _centerMonth = nextMonth;
        await BuildMonthTabsAsync(_centerMonth);
    }

    public class MonthTabMoreInfo
    {
        public string Label { get; }
        public DateTime Date { get; }
        public List<FamilyTransactionResponse>? Content { get; set; }
        public bool IsLoading { get; set; } = true;

        public MonthTabMoreInfo(DateTime date)
        {
            Date = date;
            Label = date.ToString("MMMM yyyy", CultureInfo.InvariantCulture);
            Content = new List<FamilyTransactionResponse>();
        }
    }

}