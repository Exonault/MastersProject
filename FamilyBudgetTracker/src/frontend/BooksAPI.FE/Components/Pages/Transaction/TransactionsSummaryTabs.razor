@using System.Globalization
@using BooksAPI.FE.Contracts.Personal.Transaction
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util
@inject IJSRuntime JsRuntime;
@inject IPersonalTransactionService TransactionService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<MudPaper Class="pa-4">

    <div class="d-flex justify-space-between mb-2">
        <MudButton Variant="Variant.Outlined" OnClick="GoToPrevious">
            <MudIcon Icon="@Icons.Material.Filled.ChevronLeft"/>
            Previous
        </MudButton>

        <MudButton Variant="Variant.Outlined" OnClick="GoToNext">
            Next
            <MudIcon Icon="@Icons.Material.Filled.ChevronRight"/>
        </MudButton>
    </div>

    <MudTabs @bind-ActivePanelIndex="_selectedTabIndex"
             OnActivePanelIndexChanged="OnTabChanged"
             Rounded="true" Centered="true" RoundedBar="true">

        @foreach (var month in _monthTabs)
        {
            @if (month.IsLoading)
            {
                <div class="mt-4">
                    <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
                </div>
            }
            else
            {
                var response = month.Content;

                <MudTabPanel Text="@month.Label" Class="pe-none">
                    <SummaryCard Response="response"/>
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="6">
                            <div id="spendingChart" style="width: 100%; height: 500px">

                            </div>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            }
        }
    </MudTabs>
</MudPaper>

@code {

    private List<MonthTabSummaryInfo> _monthTabs = new();
    private int _selectedTabIndex;
    private DateTime _centerMonth;

    private const int TabCount = 5; // Change this to 3, 5, 7, etc. (should be odd)
    private int CenterIndex => TabCount / 2;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string _userId;
    private string _token;
    private string _refreshToken;

    private async Task GenerateSpendingChart(PersonalTransactionPeriodSummaryResponse response)
    {
        await JsRuntime.InvokeVoidAsync("generateMonthlySpendingChart", response.ExpenseCategoryAmounts, "spendingChart");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // var summary = await TransactionService.GetSummary(DateTime.Now, _token, _refreshToken, _userId);
            var summary = MockUtil.GetMockTransactionSummaryResponse();

            await GenerateSpendingChart(summary);
        }
        else
        {
            // var summary = await TransactionService.GetSummary(_centerMonth, _token, _refreshToken, _userId);
            var summary = MockUtil.GetMockTransactionSummaryResponse();
            await GenerateSpendingChart(summary);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _userId = UserUtil.GetUserId(state.User);

        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
        }
        catch (Exception e)
        {
        }

        _centerMonth = DateTime.Now;
        await BuildMonthTabsAsync(_centerMonth);
    }


    private async Task OnTabChanged(int newIndex)
    {
        if (newIndex != CenterIndex)
        {
            _centerMonth = _monthTabs[newIndex].Date;
            await BuildMonthTabsAsync(_centerMonth);
        }
    }

    private async Task BuildMonthTabsAsync(DateTime center)
    {
        _monthTabs = new List<MonthTabSummaryInfo>();
        for (int i = -CenterIndex; i <= CenterIndex; i++)
        {
            _monthTabs.Add(new MonthTabSummaryInfo(center.AddMonths(i)));
        }

        var loadTasks = _monthTabs.Select(async tab =>
        {
            tab.Content = MockUtil.GetMockTransactionSummaryResponse();
            // tab.Content = await TransactionService.GetSummary(tab.Date, _token, _refreshToken, _userId);
            tab.IsLoading = false;
        });

        await Task.WhenAll(loadTasks);

        _selectedTabIndex = CenterIndex;
        StateHasChanged();
    }

    private async Task GoToPrevious()
    {
        _centerMonth = _centerMonth.AddMonths(-1);
        await BuildMonthTabsAsync(_centerMonth);
    }

    private async Task GoToNext()
    {
        _centerMonth = _centerMonth.AddMonths(1);
        await BuildMonthTabsAsync(_centerMonth);
    }

    public class MonthTabSummaryInfo
    {
        public string Label { get; }
        public DateTime Date { get; }
        public PersonalTransactionPeriodSummaryResponse Content { get; set; }
        public bool IsLoading { get; set; } = true;

        public MonthTabSummaryInfo(DateTime date)
        {
            Date = date;
            Label = date.ToString("MMMM yyyy", CultureInfo.InvariantCulture);
        }
    }

}
